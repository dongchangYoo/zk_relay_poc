import "utils/pack/u32/pack256.zok" as pack256
import "utils/pack/u32/nonStrictUnpack256.zok" as unpack256
import "utils/pack/u32/pack128.zok" as pack128
import "utils/pack/u32/unpack128.zok" as unpack128

import "./libs/update_target.zok" as update_target
import "./libs/to_big_endian256.zok" as to_big_endian256
import "./validate_block_header.zok" as validate_block_header


def main(field epoch_head_time_and_bits, field prev_hash, private u32[1][32] intermediate_blocks, field[5] final_block) -> (field, field):
    u32[4] tmp = unpack128(epoch_head_time_and_bits)
    u32 little_head_time = tmp[1]
    u32 little_head_bits = tmp[2]

    u32[8] big_prev_hash = unpack256(prev_hash)
    u32[8] little_prev_hash = to_big_endian256(big_prev_hash)

    u32[32] little_final_block = [
        ...unpack128(final_block[0]),
        ...unpack128(final_block[1]),
        ...unpack128(final_block[2]),
        ...unpack128(final_block[3]),
        ...unpack128(final_block[4]),
        2147483648, ...[0; 10], 640
    ]

    // validate headers
    u32[8] little_block_hash = validate_block_header(little_head_bits, little_prev_hash, intermediate_blocks[0])
    // ...
    // ...

    // validate final block header
    u32 next_bits = little_final_block[18]
    u32[8] little_final_hash = validate_block_header(next_bits, little_block_hash, little_final_block)
    field big_final_hash = pack256(to_big_endian256(little_final_hash))

    // validate target
    field big_updated_target = update_target(little_head_time, little_head_bits, intermediate_blocks[0][17])

    return big_final_hash, big_updated_target